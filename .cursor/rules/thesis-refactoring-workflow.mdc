---
alwaysApply: false
description: Systematic workflow for refactoring thesis to remove duplicates and improve focus
---

# Thesis Refactoring Workflow

## When to Use This Workflow
- Document feels repetitive
- Multiple sections explain the same concepts
- Base model details overshadow your contribution
- Document length seems excessive for content
- Before final submission review

## Step-by-Step Process

### 1. Extract Full Text for Analysis
```bash
cd /path/to/thesis
latexmk -pdf -output-directory=build main.tex
pdftotext -layout build/main.pdf build/main_analysis.txt
```

**Purpose**: Create searchable text version for identifying duplicates.

### 2. Identify Duplication Patterns

#### Search for Repeated Content
```bash
# Find repeated dataset numbers
grep -n "40,060\|629,380\|51,663" build/main_analysis.txt

# Find repeated metric definitions
grep -n "Jensen-Shannon\|Hausdorff\|Dynamic Time Warping" build/main_analysis.txt

# Find repeated architectural details
grep -n "6-layer\|512-dim\|2-layer GCN" build/main_analysis.txt
```

#### Manual Review
Read through and mark:
- Sections that explain the same concept
- Tables/figures showing same data
- Equations appearing multiple times
- Model architectures described repeatedly

### 3. Categorize Duplicates

Create a plan file listing duplicates by severity:

**HIGH Priority** (Remove immediately):
- Exact duplicate definitions/equations
- Dataset statistics repeated in multiple sections
- Evaluation metrics defined in methodology AND evaluation

**MEDIUM Priority** (Consolidate):
- Similar explanations across sections
- Redundant preprocessing descriptions
- Over-detailed base model specifications

**LOW Priority** (Acceptable repetition):
- Key results in abstract AND conclusion
- Brief concept reminders when sections are far apart
- Cross-references that include context

### 4. Determine Canonical Locations

For each duplicate, decide the ONE place it belongs:

| Content Type | Canonical Location |
|--------------|-------------------|
| Problem definition | Introduction or Methodology |
| Model architecture (base) | Brief in Methodology + cite |
| Model architecture (yours) | Full in Methodology |
| Algorithm details | Methodology section |
| Dataset statistics | Data/Preprocessing section |
| Preprocessing steps | Data/Preprocessing section |
| Hyperparameter search | Implementation section |
| Evaluation metrics | Evaluation section |
| Training configuration | Implementation section |
| Experimental results | Evaluation section |
| Key findings | Evaluation AND Conclusion (summary) |

### 5. Create Refactoring Plan

Document changes before making them:

```markdown
## File: sections/03-methodology.tex
- Remove: Evaluation metrics definitions (lines 354-375)
- Replace with: Forward reference to Section 6.2
- Lines saved: ~50-60

## File: sections/04-implementation-details.tex  
- Remove: Dataset statistics (lines 12-27)
- Replace with: Reference to Section 5.1 and Table 5
- Lines saved: ~15-20
```

### 6. Implement Changes Incrementally

**Order of Operations**:
1. Remove exact duplicates (highest confidence)
2. Consolidate dataset statistics
3. Simplify base model descriptions
4. Add cross-references
5. Verify no broken references

**After Each Change**:
```bash
# Rebuild and check for errors
latexmk -pdf -output-directory=build main.tex

# Check for undefined references
grep "undefined" build/main.log

# Verify document still makes sense
pdftotext -layout build/main.pdf build/main_check.txt
# Read relevant sections
```

### 7. Verify Cross-References

Ensure all `\ref{}` and `\autoref{}` commands resolve:

```latex
% Add labels to canonical locations
\subsection{Evaluation Metrics}
\label{sec:eval-metrics}

% Reference from other sections  
...detailed in Section~\ref{sec:eval-metrics}...

% Use autoref for automatic type
...described in \autoref{sec:eval-metrics}...
```

**Check resolution**:
```bash
# Look for LaTeX warnings
grep "Reference.*undefined\|Citation.*undefined" build/main.log
```

### 8. Final Verification

After all changes:

```bash
# Full rebuild
latexmk -pdf -output-directory=build -g main.tex

# Convert to text
pdftotext -layout build/main.pdf build/main_final.txt

# Read through completely
# Check for:
# - Coherent flow between sections
# - No orphaned explanations
# - Cross-references make sense in context
# - Focus remains on YOUR contribution
# - Base models appropriately brief with citations
```

### 9. Measure Impact

```bash
# Count lines before/after
wc -l build/main_before.txt build/main_final.txt

# Calculate reduction
# Example: 1966 → 1825 lines = 141 lines (7.2% reduction)
```

### 10. Commit Changes

Follow git best practices:

```bash
git add sections/*.tex
git commit -m "♻️ refactor(content): remove duplicates and over-explained details

Streamline thesis to focus on novel contribution by:
- Removing duplicate metric definitions
- Consolidating dataset statistics  
- Simplifying base model specifications with citations
- Adding cross-references between sections

Reduced document from X to Y lines (Z% reduction).
Emphasis now on distillation framework vs re-documenting base models."
```

## Common Pitfalls to Avoid

### 1. Breaking Document Flow
**Problem**: Removing too much context makes sections hard to follow.
**Solution**: Replace removals with brief reminders + references.

```latex
% ❌ TOO ABRUPT
We use the vocabulary mapping to align distributions.

% ✅ BETTER
We use the vocabulary mapping $\phi$ (Algorithm~\ref{alg:vocab-map}) 
to align teacher and student distributions.
```

### 2. Creating Circular References
**Problem**: Section A references B, B references C, C references A.
**Solution**: Establish clear information hierarchy.

```
Methodology → Implementation → Data → Evaluation
     ↑                                     |
     |___________back-reference____________|
```

### 3. Removing Necessary Repetition
**Problem**: Key concepts too far apart need brief reminders.
**Solution**: Brief reminders OK, full re-explanations not OK.

```latex
% ✅ ACCEPTABLE REMINDER
Using the temperature-scaled KL divergence from Section~\ref{sec:distill}, 
we compute...

% ❌ UNNECESSARY RE-EXPLANATION  
The KL divergence is defined as KL(P||Q) = ... [full equation again]
```

### 4. Over-Abbreviating
**Problem**: Replacing paragraphs with "see Section X" makes reading tedious.
**Solution**: Include key 1-2 sentence summary + reference.

```latex
% ❌ TOO BRIEF
We use the HOSER architecture~\cite{cao2025hoser}.

% ✅ BETTER
We use HOSER~\cite{cao2025hoser}, a hierarchical graph-aware predictor
that operates on road sequences with spatial candidate pruning, achieving
~13ms inference speed.
```

## Success Metrics

After refactoring:
- ✅ Each concept explained in exactly ONE place
- ✅ 10-20% reduction in document length typical
- ✅ Cross-references resolve correctly
- ✅ Focus clearly on YOUR contribution
- ✅ Base models briefly described with citations
- ✅ Document still reads smoothly section-by-section
- ✅ No undefined references in build log

## Maintenance

After major content additions:
1. Check for new duplicates introduced
2. Verify added content goes in canonical location
3. Add cross-references if referencing existing sections
4. Update tables/statistics in single location only
