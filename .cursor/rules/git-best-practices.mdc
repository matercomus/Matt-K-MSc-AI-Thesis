---
alwaysApply: true
---

# Git Best Practices for LaTeX Thesis Writing

## Commit Message Structure
Follow conventional commit format with gitmojis for clarity:
```
<gitmoji> <type>: <description>

[optional body]

[optional footer]
```

### Types for Thesis Writing
- ✍️ `content`: Writing new content, sections, arguments, or analysis
- 📚 `lit-review`: Literature review additions or updates
- 🔬 `methodology`: Methodology section changes
- 📊 `results`: Results, analysis, or discussion updates
- 🔗 `cite`: Citation additions or reference management (via Zotero)
- 🖼️ `figure`: Adding or updating figures, tables, or plots
- 📝 `edit`: Content revisions, rewording, or refinement
- ♻️ `refactor`: Restructuring sections or reorganizing content
- 🎨 `format`: LaTeX formatting, styling, or layout changes
- 🔧 `config`: Build configuration, package updates, or tool setup
- 📦 `deps`: LaTeX package dependencies or bibliography updates
- 🐛 `fix`: Fixing compilation errors or broken references
- 🚧 `draft`: Work-in-progress commits for incomplete sections
- 🎯 `review`: Incorporating reviewer or supervisor feedback

### Examples
```bash
✍️ content: add initial draft of data preprocessing section
📚 lit-review: expand related work on trajectory generation
🔬 methodology: detail DiffTraj implementation approach
📊 results: add quantitative evaluation metrics
🔗 cite: add references for privacy-preserving techniques
🖼️ figure: add trajectory visualization comparison plots
📝 edit: revise introduction for clarity
♻️ refactor: reorganize methodology subsections
🎨 format: adjust table formatting and caption placement
🔧 config: update latexmk build configuration
🐛 fix: resolve undefined citation references
🚧 draft: initial outline for evaluation chapter
🎯 review: address supervisor comments on methodology
```

## Commit Guidelines

### Single Logical Change
- One conceptual change per commit (e.g., one subsection, one figure, one set of related citations)
- If describing multiple unrelated changes, split into separate commits
- Group related edits (e.g., content + associated citations + figure) in one commit

### Descriptive Messages
- Use imperative mood ("add" not "added")
- Be specific about which section or chapter changed
- Include context for major structural changes

### Staging Strategy
```bash
# Review changes before committing
git diff main.tex
git add -p  # Interactive staging for precise control
git status  # Final verification
```

## Branch Management for Thesis Development

### Workflow for Solo Thesis Project
- `main`: Current stable version of thesis
- `chapter/<name>`: Major chapter development
- `draft/<topic>`: Exploratory writing or draft sections
- `revision/<round>`: Supervisor feedback revisions
- `figure/<topic>`: Complex figure or plot development

### Branch Operations
```bash
# Create branch for new chapter
git checkout -b chapter/methodology

# Regular commits during writing
git add main.tex custom-commands.tex
git commit -m "✍️ content: add methodology framework overview"

# Merge when chapter is complete/stable
git checkout main
git merge chapter/methodology
git branch -d chapter/methodology

# Quick branch for supervisor revisions
git checkout -b revision/round-2
# ... make changes ...
git commit -m "🎯 review: address comments on evaluation section"
git checkout main && git merge revision/round-2
```

## Pre-Commit Checks
Always verify before committing:
1. Document compiles without errors (`latexmk -pdf main.tex`)
2. No undefined citations or references
3. All figures are referenced in text
4. No temporary/debug LaTeX commands left (e.g., `\todo`, `\comment`)
5. Bibliography file not manually edited (Zotero is source of truth)
6. Build artifacts remain in `build/` directory

## Repository Hygiene

### Regular Maintenance
```bash
# Clean up merged branches
git branch --merged | grep -v main | xargs git branch -d

# Ensure .gitignore covers build artifacts
# Keep references_new.bib under version control but never manually edit
```

### File Organization
- Commit related content changes together (e.g., section + figures + citations)
- Separate major structural changes from content changes
- Use `git add -A` carefully - prefer explicit file staging
- Keep commits focused: one section/concept at a time

### Thesis-Specific Patterns
```bash
# Add new section with citations and figure
git add main.tex assets/plots/new-figure.pdf
git commit -m "✍️ content: add trajectory anomaly detection overview
- Describe detection framework
- Add architecture diagram (Figure 3.2)
- Cite key papers on anomaly detection"

# Update references from Zotero
git add references_new.bib
git commit -m "🔗 cite: sync bibliography with Zotero library"

# Update figure based on feedback
git add assets/plots/accuracy-comparison.pdf main.tex
git commit -m "🖼️ figure: improve accuracy comparison visualization
- Add error bars
- Update caption with statistical significance"

# Multiple related edits
git add main.tex
git commit -m "📝 edit: revise privacy preservation section
- Clarify differential privacy explanation
- Improve notation consistency
- Strengthen argument flow"
```

## Emergency Procedures

### Quick Fixes
```bash
# Amend last commit if not pushed (e.g., fix typo)
git add main.tex
git commit --amend --no-edit

# Reset soft for reworking recent commits
git reset --soft HEAD~1
```

### Recovery
```bash
# View commit history
git log --oneline -10

# Recover lost commits
git reflog
```

## Integration with Thesis Tools

### With Zotero (Bibliography Management)
```bash
# After updating Zotero library, export to references_new.bib
# Then commit the updated bibliography
git add references_new.bib
git commit -m "🔗 cite: sync updated references from Zotero"
```

### With LaTeX Compilation
```bash
# Build artifacts stay in build/ directory (gitignored)
# Only commit source files, not generated PDFs
git add main.tex title_page.tex custom-commands.tex
git commit -m "✍️ content: complete abstract and introduction"
```

### Documentation Updates
- Update README.md when thesis structure changes significantly
- Commit methodology notes alongside implementation
- Keep notes/ directory synchronized with thesis progress

## Milestone Commits
Mark significant milestones with tags:
```bash
# Tag completed draft for supervisor review
git tag -a draft-v1.0 -m "First complete draft for supervisor review"

# Tag after major revisions
git tag -a revision-round-2 -m "Revisions after second supervisor meeting"

# Tag final submission
git tag -a final-submission -m "Final thesis submission version"
```
